// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlayerRequest player request
// swagger:model PlayerRequest
type PlayerRequest struct {

	// alias
	// Required: true
	Alias *string `json:"alias"`

	// first name
	// Required: true
	FirstName *string `json:"first_name"`

	// last name
	// Required: true
	LastName *string `json:"last_name"`

	// role
	// Required: true
	// Enum: [rifler igl support awper]
	Role *string `json:"role"`
}

// Validate validates this player request
func (m *PlayerRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlayerRequest) validateAlias(formats strfmt.Registry) error {

	if err := validate.Required("alias", "body", m.Alias); err != nil {
		return err
	}

	return nil
}

func (m *PlayerRequest) validateFirstName(formats strfmt.Registry) error {

	if err := validate.Required("first_name", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *PlayerRequest) validateLastName(formats strfmt.Registry) error {

	if err := validate.Required("last_name", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

var playerRequestTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rifler","igl","support","awper"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		playerRequestTypeRolePropEnum = append(playerRequestTypeRolePropEnum, v)
	}
}

const (

	// PlayerRequestRoleRifler captures enum value "rifler"
	PlayerRequestRoleRifler string = "rifler"

	// PlayerRequestRoleIgl captures enum value "igl"
	PlayerRequestRoleIgl string = "igl"

	// PlayerRequestRoleSupport captures enum value "support"
	PlayerRequestRoleSupport string = "support"

	// PlayerRequestRoleAwper captures enum value "awper"
	PlayerRequestRoleAwper string = "awper"
)

// prop value enum
func (m *PlayerRequest) validateRoleEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, playerRequestTypeRolePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PlayerRequest) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlayerRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlayerRequest) UnmarshalBinary(b []byte) error {
	var res PlayerRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

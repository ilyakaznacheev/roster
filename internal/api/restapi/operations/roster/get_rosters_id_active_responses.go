// Code generated by go-swagger; DO NOT EDIT.

package roster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/ilyakaznacheev/roster/internal/api/models"
)

// GetRostersIDActiveOKCode is the HTTP code returned for type GetRostersIDActiveOK
const GetRostersIDActiveOKCode int = 200

/*GetRostersIDActiveOK successful operation

swagger:response getRostersIdActiveOK
*/
type GetRostersIDActiveOK struct {

	/*
	  In: Body
	*/
	Payload *models.Roster `json:"body,omitempty"`
}

// NewGetRostersIDActiveOK creates GetRostersIDActiveOK with default headers values
func NewGetRostersIDActiveOK() *GetRostersIDActiveOK {

	return &GetRostersIDActiveOK{}
}

// WithPayload adds the payload to the get rosters Id active o k response
func (o *GetRostersIDActiveOK) WithPayload(payload *models.Roster) *GetRostersIDActiveOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get rosters Id active o k response
func (o *GetRostersIDActiveOK) SetPayload(payload *models.Roster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRostersIDActiveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRostersIDActiveNotFoundCode is the HTTP code returned for type GetRostersIDActiveNotFound
const GetRostersIDActiveNotFoundCode int = 404

/*GetRostersIDActiveNotFound not found

swagger:response getRostersIdActiveNotFound
*/
type GetRostersIDActiveNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRostersIDActiveNotFound creates GetRostersIDActiveNotFound with default headers values
func NewGetRostersIDActiveNotFound() *GetRostersIDActiveNotFound {

	return &GetRostersIDActiveNotFound{}
}

// WithPayload adds the payload to the get rosters Id active not found response
func (o *GetRostersIDActiveNotFound) WithPayload(payload *models.Error) *GetRostersIDActiveNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get rosters Id active not found response
func (o *GetRostersIDActiveNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRostersIDActiveNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRostersIDActiveInternalServerErrorCode is the HTTP code returned for type GetRostersIDActiveInternalServerError
const GetRostersIDActiveInternalServerErrorCode int = 500

/*GetRostersIDActiveInternalServerError internal server error

swagger:response getRostersIdActiveInternalServerError
*/
type GetRostersIDActiveInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRostersIDActiveInternalServerError creates GetRostersIDActiveInternalServerError with default headers values
func NewGetRostersIDActiveInternalServerError() *GetRostersIDActiveInternalServerError {

	return &GetRostersIDActiveInternalServerError{}
}

// WithPayload adds the payload to the get rosters Id active internal server error response
func (o *GetRostersIDActiveInternalServerError) WithPayload(payload *models.Error) *GetRostersIDActiveInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get rosters Id active internal server error response
func (o *GetRostersIDActiveInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRostersIDActiveInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

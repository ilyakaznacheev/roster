// Code generated by go-swagger; DO NOT EDIT.

package roster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRostersIDActiveHandlerFunc turns a function with the right signature into a get rosters ID active handler
type GetRostersIDActiveHandlerFunc func(GetRostersIDActiveParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRostersIDActiveHandlerFunc) Handle(params GetRostersIDActiveParams) middleware.Responder {
	return fn(params)
}

// GetRostersIDActiveHandler interface for that can handle valid get rosters ID active params
type GetRostersIDActiveHandler interface {
	Handle(GetRostersIDActiveParams) middleware.Responder
}

// NewGetRostersIDActive creates a new http.Handler for the get rosters ID active operation
func NewGetRostersIDActive(ctx *middleware.Context, handler GetRostersIDActiveHandler) *GetRostersIDActive {
	return &GetRostersIDActive{Context: ctx, Handler: handler}
}

/*GetRostersIDActive swagger:route GET /rosters/{id}/active roster getRostersIdActive

Get a roster with active players only

Returns a roster with active playes only

*/
type GetRostersIDActive struct {
	Context *middleware.Context
	Handler GetRostersIDActiveHandler
}

func (o *GetRostersIDActive) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRostersIDActiveParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

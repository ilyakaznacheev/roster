// Code generated by go-swagger; DO NOT EDIT.

package player

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/ilyakaznacheev/roster/internal/models"
)

// PostRosterRosteridAddPlayerCreatedCode is the HTTP code returned for type PostRosterRosteridAddPlayerCreated
const PostRosterRosteridAddPlayerCreatedCode int = 201

/*PostRosterRosteridAddPlayerCreated created

swagger:response postRosterRosteridAddPlayerCreated
*/
type PostRosterRosteridAddPlayerCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Player `json:"body,omitempty"`
}

// NewPostRosterRosteridAddPlayerCreated creates PostRosterRosteridAddPlayerCreated with default headers values
func NewPostRosterRosteridAddPlayerCreated() *PostRosterRosteridAddPlayerCreated {

	return &PostRosterRosteridAddPlayerCreated{}
}

// WithPayload adds the payload to the post roster rosterid add player created response
func (o *PostRosterRosteridAddPlayerCreated) WithPayload(payload *models.Player) *PostRosterRosteridAddPlayerCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post roster rosterid add player created response
func (o *PostRosterRosteridAddPlayerCreated) SetPayload(payload *models.Player) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRosterRosteridAddPlayerCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRosterRosteridAddPlayerForbiddenCode is the HTTP code returned for type PostRosterRosteridAddPlayerForbidden
const PostRosterRosteridAddPlayerForbiddenCode int = 403

/*PostRosterRosteridAddPlayerForbidden forbidden

swagger:response postRosterRosteridAddPlayerForbidden
*/
type PostRosterRosteridAddPlayerForbidden struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostRosterRosteridAddPlayerForbidden creates PostRosterRosteridAddPlayerForbidden with default headers values
func NewPostRosterRosteridAddPlayerForbidden() *PostRosterRosteridAddPlayerForbidden {

	return &PostRosterRosteridAddPlayerForbidden{}
}

// WithPayload adds the payload to the post roster rosterid add player forbidden response
func (o *PostRosterRosteridAddPlayerForbidden) WithPayload(payload *models.Error) *PostRosterRosteridAddPlayerForbidden {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post roster rosterid add player forbidden response
func (o *PostRosterRosteridAddPlayerForbidden) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRosterRosteridAddPlayerForbidden) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(403)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRosterRosteridAddPlayerNotFoundCode is the HTTP code returned for type PostRosterRosteridAddPlayerNotFound
const PostRosterRosteridAddPlayerNotFoundCode int = 404

/*PostRosterRosteridAddPlayerNotFound not found

swagger:response postRosterRosteridAddPlayerNotFound
*/
type PostRosterRosteridAddPlayerNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostRosterRosteridAddPlayerNotFound creates PostRosterRosteridAddPlayerNotFound with default headers values
func NewPostRosterRosteridAddPlayerNotFound() *PostRosterRosteridAddPlayerNotFound {

	return &PostRosterRosteridAddPlayerNotFound{}
}

// WithPayload adds the payload to the post roster rosterid add player not found response
func (o *PostRosterRosteridAddPlayerNotFound) WithPayload(payload *models.Error) *PostRosterRosteridAddPlayerNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post roster rosterid add player not found response
func (o *PostRosterRosteridAddPlayerNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRosterRosteridAddPlayerNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PostRosterRosteridAddPlayerInternalServerErrorCode is the HTTP code returned for type PostRosterRosteridAddPlayerInternalServerError
const PostRosterRosteridAddPlayerInternalServerErrorCode int = 500

/*PostRosterRosteridAddPlayerInternalServerError internal server error

swagger:response postRosterRosteridAddPlayerInternalServerError
*/
type PostRosterRosteridAddPlayerInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewPostRosterRosteridAddPlayerInternalServerError creates PostRosterRosteridAddPlayerInternalServerError with default headers values
func NewPostRosterRosteridAddPlayerInternalServerError() *PostRosterRosteridAddPlayerInternalServerError {

	return &PostRosterRosteridAddPlayerInternalServerError{}
}

// WithPayload adds the payload to the post roster rosterid add player internal server error response
func (o *PostRosterRosteridAddPlayerInternalServerError) WithPayload(payload *models.Error) *PostRosterRosteridAddPlayerInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the post roster rosterid add player internal server error response
func (o *PostRosterRosteridAddPlayerInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PostRosterRosteridAddPlayerInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

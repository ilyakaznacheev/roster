// Code generated by go-swagger; DO NOT EDIT.

package roster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRosterRosteridBenchedHandlerFunc turns a function with the right signature into a get roster rosterid benched handler
type GetRosterRosteridBenchedHandlerFunc func(GetRosterRosteridBenchedParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRosterRosteridBenchedHandlerFunc) Handle(params GetRosterRosteridBenchedParams) middleware.Responder {
	return fn(params)
}

// GetRosterRosteridBenchedHandler interface for that can handle valid get roster rosterid benched params
type GetRosterRosteridBenchedHandler interface {
	Handle(GetRosterRosteridBenchedParams) middleware.Responder
}

// NewGetRosterRosteridBenched creates a new http.Handler for the get roster rosterid benched operation
func NewGetRosterRosteridBenched(ctx *middleware.Context, handler GetRosterRosteridBenchedHandler) *GetRosterRosteridBenched {
	return &GetRosterRosteridBenched{Context: ctx, Handler: handler}
}

/*GetRosterRosteridBenched swagger:route GET /roster/{rosterid}/benched roster getRosterRosteridBenched

Get a roster with benched players only

Returns a roster with benched playes only

*/
type GetRosterRosteridBenched struct {
	Context *middleware.Context
	Handler GetRosterRosteridBenchedHandler
}

func (o *GetRosterRosteridBenched) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRosterRosteridBenchedParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

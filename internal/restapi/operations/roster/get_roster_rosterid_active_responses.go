// Code generated by go-swagger; DO NOT EDIT.

package roster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/ilyakaznacheev/roster/internal/models"
)

// GetRosterRosteridActiveOKCode is the HTTP code returned for type GetRosterRosteridActiveOK
const GetRosterRosteridActiveOKCode int = 200

/*GetRosterRosteridActiveOK successful operation

swagger:response getRosterRosteridActiveOK
*/
type GetRosterRosteridActiveOK struct {

	/*
	  In: Body
	*/
	Payload *models.Roster `json:"body,omitempty"`
}

// NewGetRosterRosteridActiveOK creates GetRosterRosteridActiveOK with default headers values
func NewGetRosterRosteridActiveOK() *GetRosterRosteridActiveOK {

	return &GetRosterRosteridActiveOK{}
}

// WithPayload adds the payload to the get roster rosterid active o k response
func (o *GetRosterRosteridActiveOK) WithPayload(payload *models.Roster) *GetRosterRosteridActiveOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get roster rosterid active o k response
func (o *GetRosterRosteridActiveOK) SetPayload(payload *models.Roster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRosterRosteridActiveOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRosterRosteridActiveNotFoundCode is the HTTP code returned for type GetRosterRosteridActiveNotFound
const GetRosterRosteridActiveNotFoundCode int = 404

/*GetRosterRosteridActiveNotFound not found

swagger:response getRosterRosteridActiveNotFound
*/
type GetRosterRosteridActiveNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRosterRosteridActiveNotFound creates GetRosterRosteridActiveNotFound with default headers values
func NewGetRosterRosteridActiveNotFound() *GetRosterRosteridActiveNotFound {

	return &GetRosterRosteridActiveNotFound{}
}

// WithPayload adds the payload to the get roster rosterid active not found response
func (o *GetRosterRosteridActiveNotFound) WithPayload(payload *models.Error) *GetRosterRosteridActiveNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get roster rosterid active not found response
func (o *GetRosterRosteridActiveNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRosterRosteridActiveNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRosterRosteridActiveInternalServerErrorCode is the HTTP code returned for type GetRosterRosteridActiveInternalServerError
const GetRosterRosteridActiveInternalServerErrorCode int = 500

/*GetRosterRosteridActiveInternalServerError internal server error

swagger:response getRosterRosteridActiveInternalServerError
*/
type GetRosterRosteridActiveInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRosterRosteridActiveInternalServerError creates GetRosterRosteridActiveInternalServerError with default headers values
func NewGetRosterRosteridActiveInternalServerError() *GetRosterRosteridActiveInternalServerError {

	return &GetRosterRosteridActiveInternalServerError{}
}

// WithPayload adds the payload to the get roster rosterid active internal server error response
func (o *GetRosterRosteridActiveInternalServerError) WithPayload(payload *models.Error) *GetRosterRosteridActiveInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get roster rosterid active internal server error response
func (o *GetRosterRosteridActiveInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRosterRosteridActiveInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

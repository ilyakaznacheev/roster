// Code generated by go-swagger; DO NOT EDIT.

package roster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/ilyakaznacheev/roster/internal/models"
)

// GetRostersIDBenchedOKCode is the HTTP code returned for type GetRostersIDBenchedOK
const GetRostersIDBenchedOKCode int = 200

/*GetRostersIDBenchedOK successful operation

swagger:response getRostersIdBenchedOK
*/
type GetRostersIDBenchedOK struct {

	/*
	  In: Body
	*/
	Payload *models.Roster `json:"body,omitempty"`
}

// NewGetRostersIDBenchedOK creates GetRostersIDBenchedOK with default headers values
func NewGetRostersIDBenchedOK() *GetRostersIDBenchedOK {

	return &GetRostersIDBenchedOK{}
}

// WithPayload adds the payload to the get rosters Id benched o k response
func (o *GetRostersIDBenchedOK) WithPayload(payload *models.Roster) *GetRostersIDBenchedOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get rosters Id benched o k response
func (o *GetRostersIDBenchedOK) SetPayload(payload *models.Roster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRostersIDBenchedOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRostersIDBenchedNotFoundCode is the HTTP code returned for type GetRostersIDBenchedNotFound
const GetRostersIDBenchedNotFoundCode int = 404

/*GetRostersIDBenchedNotFound not found

swagger:response getRostersIdBenchedNotFound
*/
type GetRostersIDBenchedNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRostersIDBenchedNotFound creates GetRostersIDBenchedNotFound with default headers values
func NewGetRostersIDBenchedNotFound() *GetRostersIDBenchedNotFound {

	return &GetRostersIDBenchedNotFound{}
}

// WithPayload adds the payload to the get rosters Id benched not found response
func (o *GetRostersIDBenchedNotFound) WithPayload(payload *models.Error) *GetRostersIDBenchedNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get rosters Id benched not found response
func (o *GetRostersIDBenchedNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRostersIDBenchedNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRostersIDBenchedInternalServerErrorCode is the HTTP code returned for type GetRostersIDBenchedInternalServerError
const GetRostersIDBenchedInternalServerErrorCode int = 500

/*GetRostersIDBenchedInternalServerError internal server error

swagger:response getRostersIdBenchedInternalServerError
*/
type GetRostersIDBenchedInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRostersIDBenchedInternalServerError creates GetRostersIDBenchedInternalServerError with default headers values
func NewGetRostersIDBenchedInternalServerError() *GetRostersIDBenchedInternalServerError {

	return &GetRostersIDBenchedInternalServerError{}
}

// WithPayload adds the payload to the get rosters Id benched internal server error response
func (o *GetRostersIDBenchedInternalServerError) WithPayload(payload *models.Error) *GetRostersIDBenchedInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get rosters Id benched internal server error response
func (o *GetRostersIDBenchedInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRostersIDBenchedInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

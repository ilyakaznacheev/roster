// Code generated by go-swagger; DO NOT EDIT.

package roster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/ilyakaznacheev/roster/internal/models"
)

// GetRosterRosteridOKCode is the HTTP code returned for type GetRosterRosteridOK
const GetRosterRosteridOKCode int = 200

/*GetRosterRosteridOK successful operation

swagger:response getRosterRosteridOK
*/
type GetRosterRosteridOK struct {

	/*
	  In: Body
	*/
	Payload *models.Roster `json:"body,omitempty"`
}

// NewGetRosterRosteridOK creates GetRosterRosteridOK with default headers values
func NewGetRosterRosteridOK() *GetRosterRosteridOK {

	return &GetRosterRosteridOK{}
}

// WithPayload adds the payload to the get roster rosterid o k response
func (o *GetRosterRosteridOK) WithPayload(payload *models.Roster) *GetRosterRosteridOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get roster rosterid o k response
func (o *GetRosterRosteridOK) SetPayload(payload *models.Roster) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRosterRosteridOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRosterRosteridNotFoundCode is the HTTP code returned for type GetRosterRosteridNotFound
const GetRosterRosteridNotFoundCode int = 404

/*GetRosterRosteridNotFound not found

swagger:response getRosterRosteridNotFound
*/
type GetRosterRosteridNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRosterRosteridNotFound creates GetRosterRosteridNotFound with default headers values
func NewGetRosterRosteridNotFound() *GetRosterRosteridNotFound {

	return &GetRosterRosteridNotFound{}
}

// WithPayload adds the payload to the get roster rosterid not found response
func (o *GetRosterRosteridNotFound) WithPayload(payload *models.Error) *GetRosterRosteridNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get roster rosterid not found response
func (o *GetRosterRosteridNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRosterRosteridNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetRosterRosteridInternalServerErrorCode is the HTTP code returned for type GetRosterRosteridInternalServerError
const GetRosterRosteridInternalServerErrorCode int = 500

/*GetRosterRosteridInternalServerError internal server error

swagger:response getRosterRosteridInternalServerError
*/
type GetRosterRosteridInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetRosterRosteridInternalServerError creates GetRosterRosteridInternalServerError with default headers values
func NewGetRosterRosteridInternalServerError() *GetRosterRosteridInternalServerError {

	return &GetRosterRosteridInternalServerError{}
}

// WithPayload adds the payload to the get roster rosterid internal server error response
func (o *GetRosterRosteridInternalServerError) WithPayload(payload *models.Error) *GetRosterRosteridInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get roster rosterid internal server error response
func (o *GetRosterRosteridInternalServerError) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetRosterRosteridInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

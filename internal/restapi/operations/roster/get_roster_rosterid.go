// Code generated by go-swagger; DO NOT EDIT.

package roster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetRosterRosteridHandlerFunc turns a function with the right signature into a get roster rosterid handler
type GetRosterRosteridHandlerFunc func(GetRosterRosteridParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetRosterRosteridHandlerFunc) Handle(params GetRosterRosteridParams) middleware.Responder {
	return fn(params)
}

// GetRosterRosteridHandler interface for that can handle valid get roster rosterid params
type GetRosterRosteridHandler interface {
	Handle(GetRosterRosteridParams) middleware.Responder
}

// NewGetRosterRosterid creates a new http.Handler for the get roster rosterid operation
func NewGetRosterRosterid(ctx *middleware.Context, handler GetRosterRosteridHandler) *GetRosterRosterid {
	return &GetRosterRosterid{Context: ctx, Handler: handler}
}

/*GetRosterRosterid swagger:route GET /roster/{rosterid} roster getRosterRosterid

Get a roster

Returns a roster with all playes

*/
type GetRosterRosterid struct {
	Context *middleware.Context
	Handler GetRosterRosteridHandler
}

func (o *GetRosterRosterid) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetRosterRosteridParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

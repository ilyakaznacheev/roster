// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	models "github.com/ilyakaznacheev/roster/internal/database/models"
	mock "github.com/stretchr/testify/mock"
)

// DatabaseRosterService is an autogenerated mock type for the DatabaseRosterService type
type DatabaseRosterService struct {
	mock.Mock
}

// GetAllRosters provides a mock function with given fields:
func (_m *DatabaseRosterService) GetAllRosters() ([]models.Roster, error) {
	ret := _m.Called()

	var r0 []models.Roster
	if rf, ok := ret.Get(0).(func() []models.Roster); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Roster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoster provides a mock function with given fields: id
func (_m *DatabaseRosterService) GetRoster(id int64) (*models.Roster, error) {
	ret := _m.Called(id)

	var r0 *models.Roster
	if rf, ok := ret.Get(0).(func(int64) *models.Roster); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Roster)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PushPlayer provides a mock function with given fields: id, p
func (_m *DatabaseRosterService) PushPlayer(id int64, p models.Player) error {
	ret := _m.Called(id, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, models.Player) error); ok {
		r0 = rf(id, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRoster provides a mock function with given fields: _a0
func (_m *DatabaseRosterService) UpdateRoster(_a0 models.Roster) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Roster) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

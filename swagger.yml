swagger: "2.0"
info:
  title: Roster API
  description: Roster Service API
  version: "1.0.0"
basePath: /api
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
tags:
  - name: roster
    description: A group of players related to certain roster
  - name: player
    description: Certain player in some roster
  - name: auth
    description: user authentication

paths:
  /register:
    post:
      tags:
        - auth
      summary: Register
      description: Registers a new user
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          description: Credentials
          required: true
          in: body
          schema:
            $ref: "#/definitions/AuthRequest"
      responses:
        201:
          description: created
        409:
          description: conflict
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 409, "message": {"text": "conflict"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "message": {"text": "internal server error"}}

  /login:
    post:
      tags:
        - auth
      summary: Login
      description: Returns a JWT token
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          description: Credentials
          required: true
          in: body
          schema:
            $ref: "#/definitions/AuthRequest"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/AuthToken"
        403:
          description: forbidden
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 403, "message": {"text": "forbidden"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "message": {"text": "internal server error"}}

  /rosters:
    get:
      tags:
        - roster
      summary: Get a list of rosters
      description: Returns a full list of rosters on the server
      produces:
        - application/json
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/AllRosters"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "message": {"text": "internal server error"}}

  /rosters/{id}:
    get:
      tags:
        - roster
      summary: Get a roster
      description: Returns a roster with all playes
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Roster"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "message": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "message": {"text": "internal server error"}}

  /rosters/{id}/active:
    get:
      tags:
        - roster
      summary: Get a roster with active players only
      description: Returns a roster with active playes only
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Roster"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "message": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "message": {"text": "internal server error"}}

  /rosters/{id}/benched:
    get:
      tags:
        - roster
      summary: Get a roster with benched players only
      description: Returns a roster with benched playes only
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Roster"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "message": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "message": {"text": "internal server error"}}

  /rosters/{id}/add_player:
    post:
      tags:
        - player
      summary: Add a new player
      description: Adds a new player (to a benched group)
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - name: body
          description: Player
          required: true
          in: body
          schema:
            $ref: "#/definitions/PlayerRequest"
      responses:
        201:
          description: created
          schema:
            $ref: "#/definitions/Player"
        403:
          description: forbidden
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 403, "message": {"text": "forbidden"}}
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "message": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "message": {"text": "internal server error"}}

  /rosters/{id}/rearrange:
    post:
      tags:
        - player
      summary: Rearrange players
      description: Changes player group arrangement
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          required: true
          type: integer
        - name: body
          description: Player
          required: true
          in: body
          schema:
            $ref: "#/definitions/RearrangeRequest"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Roster"
        400:
          description: bad request
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 400, "message": {"text": "bad request"}}
        403:
          description: forbidden
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 403, "message": {"text": "forbidden"}}
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "message": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "message": {"text": "internal server error"}}


definitions:
  AllRosters:
    type: array
    items:
      $ref: "#/definitions/Roster"

  Roster:
    type: object
    required:
      - id
      - players
    properties:
      id:
        type: integer
      players:
        $ref: "#/definitions/RosterPlayers"

  RosterPlayers:
    type: object
    properties:
      active:
        type: array
        x-omitempty: true
        items:
          $ref: "#/definitions/Player"
      benched:
        type: array
        x-omitempty: true
        items:
          $ref: "#/definitions/Player"

  Player:
    type: object
    required:
      - id
      - first_name
      - last_name
      - alias
    properties:
      id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      alias:
        type: string
      role:
        type: string

  PlayerRequest:
    type: object
    required:
      - first_name
      - last_name
      - alias
      - role
    properties:
      first_name:
        type: string
      last_name:
        type: string
      alias:
        type: string
      role:
        type: string
        enum: [rifler, igl, support, awper]

  RearrangeRequest:
    type: object
    properties:
      to_active:
        type: array
        items:
          type: integer
      to_benched:
        type: array
        items:
          type: integer

  Error:
    type: object
    required:
      - code
      - message
    properties:
      code:
        type: integer
      message:
        type: string

  AuthRequest:
    type: object
    required:
      - login
      - password
    properties:
      login:
        type: string
      password:
        type: string

  AuthToken:
    type: object
    required:
      - token
    properties:
      token:
        type: string
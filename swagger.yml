swagger: "2.0"
info:
  title: Roster API
  description: Roster Service API
  version: "1.0.0"
basePath: /api
schemes:
  - http
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
tags:
  - name: roster
    description: A group of players related to certain roster
  - name: player
    description: Certain player in some roster
  - name: auth
    description: user authentication


paths:
  /login:
    post:
      tags:
        - auth
      summary: Login
      description: Returns a JWT token
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/AuthToken"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "error": {"text": "internal server error"}}

  /roster:
    get:
      tags:
        - roster
      summary: Get a list of rosters
      description: Returns a full list of rosters on the server
      produces:
        - application/json
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/AllRosters"
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "error": {"text": "internal server error"}}

  /roster/{rosterid}:
    get:
      tags:
        - roster
      summary: Get a roster
      description: Returns a roster with all playes
      produces:
        - application/json
      parameters:
        - name: rosterid
          in: path
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Roster"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "error": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "error": {"text": "internal server error"}}

  /roster/{rosterid}/active:
    get:
      tags:
        - roster
      summary: Get a roster with active players only
      description: Returns a roster with active playes only
      produces:
        - application/json
      parameters:
        - name: rosterid
          in: path
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Roster"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "error": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "error": {"text": "internal server error"}}

  /roster/{rosterid}/benched:
    get:
      tags:
        - roster
      summary: Get a roster with benched players only
      description: Returns a roster with benched playes only
      produces:
        - application/json
      parameters:
        - name: rosterid
          in: path
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Roster"
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "error": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "error": {"text": "internal server error"}}

  /roster/{rosterid}/add_player:
    post:
      tags:
        - player
      summary: Add a new player
      description: Adds a new player (to a benched group)
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: rosterid
          in: path
          required: true
          type: string
        - name: body
          description: Player
          required: true
          in: body
          schema:
            $ref: "#/definitions/PlayerRequest"
      responses:
        201:
          description: created
          schema:
            $ref: "#/definitions/Player"
        403:
          description: forbidden
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 403, "error": {"text": "forbidden"}}
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "error": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "error": {"text": "internal server error"}}

  /roster/{rosterid}/rearrange:
    post:
      tags:
        - player
      summary: Rearrange players
      description: Changes player group arrangement
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: rosterid
          in: path
          required: true
          type: string
        - name: body
          description: Player
          required: true
          in: body
          schema:
            $ref: "#/definitions/RearrangeRequest"
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/Roster"
        403:
          description: forbidden
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 403, "error": {"text": "forbidden"}}
        404:
          description: not found
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 404, "error": {"text": "not found"}}
        500:
          description: internal server error
          schema:
            $ref: "#/definitions/Error"
          examples:
            application/json: { "code": 500, "error": {"text": "internal server error"}}

#  /roster/{rosterid}/player/{playerid}/to_active:
#    post:
#      tags:
#        - player
#      summary: Move a player to active
#      description: Moves a player to active group
#      security:
#        - Bearer: []
#      produces:
#        - application/json
#      parameters:
#        - name: rosterid
#          in: path
#          required: true
#          type: string
#          description: Roster ID
#        - name: playerid
#          in: path
#          required: true
#          type: string
#          description: Player ID
#      responses:
#        200:
#          description: successful operation
#          schema:
#            $ref: "#/definitions/Roster"
#        403:
#          description: forbidden
#          schema:
#            $ref: "#/definitions/Error"
#          examples:
#            application/json: { "code": 403, "error": {"text": "forbidden"}}
#        404:
#          description: not found
#          schema:
#            $ref: "#/definitions/Error"
#          examples:
#            application/json: { "code": 404, "error": {"text": "not found"}}
#        500:
#          description: internal server error
#          schema:
#            $ref: "#/definitions/Error"
#          examples:
#            application/json: { "code": 500, "error": {"text": "internal server error"}}
#
#  /roster/{rosterid}/player/{playerid}/to_bench:
#    post:
#      tags:
#        - player
#      summary: Move a player to benched
#      description: Moves a player to benched group
#      security:
#        - Bearer: []
#      produces:
#        - application/json
#      parameters:
#        - name: rosterid
#          in: path
#          required: true
#          type: string
#          description: Roster ID
#        - name: playerid
#          in: path
#          required: true
#          type: string
#          description: Player ID
#      responses:
#        200:
#          description: successful operation
#          schema:
#            $ref: "#/definitions/Roster"
#        403:
#          description: forbidden
#          schema:
#            $ref: "#/definitions/Error"
#          examples:
#            application/json: { "code": 403, "error": {"text": "forbidden"}}
#        404:
#          description: not found
#          schema:
#            $ref: "#/definitions/Error"
#          examples:
#            application/json: { "code": 404, "error": {"text": "not found"}}
#        500:
#          description: internal server error
#          schema:
#            $ref: "#/definitions/Error"
#          examples:
#            application/json: { "code": 500, "error": {"text": "internal server error"}}


definitions:
  AllRosters:
    type: array
    items:
      $ref: "#/definitions/Roster"

  Roster:
    type: object
    required:
      - id
      - players
    properties:
      id:
        type: integer
      players:
        $ref: "#/definitions/RosterPlayers"

  RosterPlayers:
    type: object
    properties:
      active:
        type: array
        items:
          $ref: "#/definitions/Player"
      benched:
        type: array
        items:
          $ref: "#/definitions/Player"

  Player:
    type: object
    required:
      - id
      - first_name
      - last_name
      - alias
    properties:
      id:
        type: integer
      first_name:
        type: string
      last_name:
        type: string
      alias:
        type: string

  PlayerRequest:
    type: object
    required:
      - first_name
      - last_name
      - alias
    properties:
      first_name:
        type: string
      last_name:
        type: string
      alias:
        type: string

  RearrangeRequest:
    type: object
    properties:
      to_active:
        type: array
        items:
          type: integer
      to_benched:
        type: array
        items:
          type: integer

  Error:
    type: object
    required:
      - code
      - error
    properties:
      code:
        type: integer
      error:
        $ref: "#/definitions/ErrorMessage"

  ErrorMessage:
    type: object
    required:
      - text
    properties:
      text:
        type: string
      details:
        type: array
        items:
          type: string

  AuthToken:
    type: object
    required:
      - token
    properties:
      token:
        type: string